package snake;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.Timer;

public class SnakeGame {

	static class MyFrame extends JFrame {

		static class XY {
			int x;
			int y;

			public XY(int x, int y) {
				this.x = x;
				this.y = y;
			}
		}

		static JPanel panelNorth;
		static JPanel panelCenter;
		static JLabel labelTitle;
		static JLabel labelMessage;
		static JPanel[][] panels = new JPanel[20][20];
		static int[][] map = new int[20][20];
		static LinkedList<XY> snake = new LinkedList<XY>();
		static int dir = 3; // up1 douwn 2 left 3
		static int score = 0;
		static int time = 0;
		static int timeTickCount = 0;
		static Timer timer = null;

		public MyFrame(String title) {
			super(title);
			this.setSize(400, 400);
			this.setVisible(true);
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

			initUI();
			makeSnakeList();
			startTimer();
			setKeyListener();
			makeFruit();
		}

		public void makeFruit() {
			Random rand = new Random();
			int randX = rand.nextInt(19);
			int randY = rand.nextInt(19);
			map[randX][randY] = 9; // 9는 과일
		}

		public void setKeyListener() {
			this.addKeyListener(new KeyAdapter() {
				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_UP) {
						if (dir != 1)
							dir = 0;
					} else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
						if (dir != 0)
							dir = 1;
					} else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
						if (dir != 3)
							dir = 2;
					} else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
						if (dir != 2)
							dir = 3;
					}
				}
			});
		}

		public void startTimer() {
			timer = new Timer(200, new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					timeTickCount += 1;
					if (timeTickCount % 50 == 1) {
						time++; // 1 초 증가

					}
					moveSnake();
					updateUI();
				}
			});
			timer.start(); // 시작
		}

		public void moveSnake() {
			XY headXY = snake.get(0);
			int headX = headXY.x;
			int headY = headXY.y;

			if (dir == 0) { // 0 : 위, 1 : 아래, 2 : 왼쪽, 3: 오른쪽
				boolean isColl = checkCollision(headX, headY - 1);
				if (isColl == true) {// 게임 오버
					labelMessage.setText("Game Over!");
					timer.stop();
					return;
				}
				snake.add(0, new XY(headX, headY - 1)); // 머리 생성
				snake.remove(snake.size() - 1); // 꼬리 삭제
			} else if (dir == 1) {
				boolean isColl = checkCollision(headX, headY + 1);
				if (isColl == true) {// 게임 오버
					labelMessage.setText("Game Over!");
					timer.stop();
					return;
				}
				snake.add(0, new XY(headX, headY + 1)); // 머리 생성
				snake.remove(snake.size() - 1); // 꼬리 삭제
			} else if (dir == 2) {
				boolean isColl = checkCollision(headX - 1, headY);
				if (isColl == true) {// 게임 오버
					labelMessage.setText("Game Over!");
					timer.stop();
					return;
				}
				snake.add(0, new XY(headX - 1, headY)); // 머리 생성
				snake.remove(snake.size() - 1); // 꼬리 삭제
			} else if (dir == 3) {
				boolean isColl = checkCollision(headX + 1, headY);
				if (isColl == true) {// 게임 오버
					labelMessage.setText("Game Over!");
					timer.stop();
					return;
				}
				snake.add(0, new XY(headX + 1, headY)); // 머리 생성
				snake.remove(snake.size() - 1); // 꼬리 삭제
			}
		}

		private boolean checkCollision(int headX, int headY) {
			if (headX < 0 || headX > 19 || headY < 0 || headY > 19) // 벽에 충돌
				return true;
			
			// 자기 몸에 부딪히면
			for (XY xy : snake) {
				if (headX == xy.x && headY == xy.y) {
					return true;
				}
			}
			// 과일 먹으면
			if (map[headY][headX] == 9) {
				map[headY][headX] = 0;
				addTail();
				makeFruit();
				score += 100;
			}
			return false;
		}

		public void addTail() {
			int tailX = snake.get(snake.size() - 1).x;
			int tailY = snake.get(snake.size() - 1).y;
			int tailX2 = snake.get(snake.size() - 2).x;
			int tailY2 = snake.get(snake.size() - 2).y;

			if (tailX < tailX2) {// 오른쪽 방향 왼쪽에 붙어야함
				snake.add(new XY(tailX - 1, tailY));
			} else if (tailX > tailX2) { // 왼쪽방향 오른쪽에 붙어야함
				snake.add(new XY(tailX + 1, tailY));
			} else if (tailY < tailY2) { // 위쪽 방향 아래에 붙어야함
				snake.add(new XY(tailX, tailY - 1));
			} else if (tailY > tailY2) { // 아랫 방향 위에 붙어야 함
				snake.add(new XY(tailX, tailY + 1));
			}
		}

		public void updateUI() {
			labelTitle.setText("Score : " + score + " Time: " + time);

			// 패널 판 초기화
			for (int i = 0; i < 20; i++) {
				for (int j = 0; j < 20; j++) {
					if (map[i][j] == 0) { // 아무것도 없음
						panels[i][j].setBackground(Color.GRAY);
					} else if (map[i][j] == 9) {
						panels[i][j].setBackground(Color.GREEN);
					}
				}
			}
			// 뱀 그리기
			int index = 0;
			for (XY xy : snake) {
				if (index == 0) {// 머리
					panels[xy.y][xy.x].setBackground(Color.RED);
				} else {// 몸, 꼬리
					panels[xy.y][xy.x].setBackground(Color.BLUE);
				}
				index++;
			}
		}

		public void makeSnakeList() {
			snake.add(new XY(10, 10));// 머리
			snake.add(new XY(9, 10));// 몸
			snake.add(new XY(8, 10));// 꼬리
		}

		public void initUI() {
			this.setLayout(new BorderLayout());

			panelNorth = new JPanel();
			panelNorth.setPreferredSize(new Dimension(400, 100));
			panelNorth.setBackground(Color.BLACK);
			panelNorth.setLayout(new FlowLayout());

			labelTitle = new JLabel("Score : 0, Time : 0sec");
			labelTitle.setPreferredSize(new Dimension(400, 50));
			labelTitle.setFont(new Font("TimesRoman", Font.BOLD, 20));
			labelTitle.setForeground(Color.WHITE);
			labelTitle.setHorizontalAlignment(JLabel.CENTER);
			panelNorth.add(labelTitle);

			labelMessage = new JLabel("Eat Fruit");
			labelMessage.setPreferredSize(new Dimension(400, 20));
			labelMessage.setFont(new Font("TimesRoman", Font.BOLD, 20));
			labelMessage.setForeground(Color.YELLOW);
			labelMessage.setHorizontalAlignment(JLabel.CENTER);
			panelNorth.add(labelMessage);

			this.add("North", panelNorth);

			panelCenter = new JPanel();
			panelCenter.setLayout(new GridLayout(20, 20));
			for (int i = 0; i < 20; i++) {
				for (int j = 0; j < 20; j++) {
					map[i][j] = 0;
					panels[i][j] = new JPanel();
					panels[i][j].setPreferredSize(new Dimension(20, 20));
					panels[i][j].setBackground(Color.GRAY);
					panelCenter.add(panels[i][j]);
				}
			}
			this.add("Center", panelCenter);
			this.pack(); // 빈공간 없애줌
		}
	}

	public static void main(String[] args) {
		new MyFrame("Snake game");

	}

}
